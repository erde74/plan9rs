use crate::dat::{
    Chan, Egrp, Fastcall, Fgrp, Label, Mach, Note, Pgrp, QLock, Rendez, Rgrp, Segment, Waitq,
};
use crate::edf::Edf;
use crate::taslock::Lock;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Proc {
    pub sched: Label,
    pub kstack: *mut i8,
    pub mach: *mut Mach,
    pub text: *mut i8,
    pub user: *mut i8,
    pub args: *mut i8,
    pub nargs: i32,
    pub rnext: *mut Proc,
    pub qnext: *mut Proc,
    pub qlock: *mut QLock,
    pub state: i32,
    pub psstate: *mut i8,
    pub seg: [*mut Segment; 10usize],
    pub seglock: QLock,
    pub pid: i32,
    pub index: i32,
    pub ref_: i32,
    pub noteid: i32,
    pub pidhash: *mut Proc,
    pub exl: Lock,
    pub waitq: *mut Waitq,
    pub nchild: i32,
    pub nwait: i32,
    pub qwaitr: QLock,
    pub waitr: Rendez,
    pub parent: *mut Proc,
    pub pgrp: *mut Pgrp,
    pub egrp: *mut Egrp,
    pub fgrp: *mut Fgrp,
    pub rgrp: *mut Rgrp,
    pub closingfgrp: *mut Fgrp,
    pub parentpid: i32,
    pub time: [u64; 6usize],
    pub kentry: usize,
    pub pcycles: i64,
    pub insyscall: i32,
    pub debug: QLock,
    pub pdbg: *mut Proc,
    pub procmode: u64,
    pub privatemem: u64,
    pub hang: i32,
    pub procctl: i32,
    pub pc: usize,
    pub rlock: Lock,
    pub r: *mut Rendez,
    pub sleep: Rendez,
    pub notepending: i32,
    pub kp: i32,
    pub palarm: *mut Proc,
    pub alarm: u64,
    pub newtlb: i32,
    pub rendtag: usize,
    pub rendval: usize,
    pub rendhash: *mut Proc,
    pub trend: *mut Rendez,
    pub tfn: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> i32>,
    pub kpfun: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub kparg: *mut ::core::ffi::c_void,
    pub scallnr: i32,
    pub arg: [u8; 40usize],
    pub nerrlab: i32,
    pub errlab: [Label; 64usize],
    pub syserrstr: *mut i8,
    pub errstr: *mut i8,
    pub errbuf0: [i8; 128usize],
    pub errbuf1: [i8; 128usize],
    pub genbuf: [i8; 128usize],
    pub slash: *mut Chan,
    pub dot: *mut Chan,
    pub note: [Note; 5usize],
    pub nnote: i16,
    pub notified: i16,
    pub lastnote: Note,
    pub notify:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void, arg2: *mut u8)>,
    pub lockwait: *mut Lock,
    pub lastlock: *mut Lock,
    pub lastilock: *mut Lock,
    pub wired: *mut Mach,
    pub mp: *mut Mach,
    pub nlocks: i32,
    pub delaysched: u64,
    pub priority: u64,
    pub basepri: u64,
    pub fixedpri: i32,
    pub cpu: u64,
    pub lastupdate: u64,
    pub readytime: u64,
    pub movetime: u64,
    pub preempted: i32,
    pub edf: *mut Edf,
    pub trace: i32,
    pub qpc: usize,
    pub setargs: i32,
    pub ureg: *mut ::core::ffi::c_void,
    pub dbgreg: *mut ::core::ffi::c_void,
    pub color: i32,
    pub fc: *mut Fastcall,
    pub fcount: i32,
    pub syscalltrace: *mut i8,
}

pub fn dumpaproc(p: &Proc) {}
